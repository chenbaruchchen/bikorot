{"ast":null,"code":"import{miloeim,tash,sadir}from\"../../tables/table\";import ReactStars from\"react-rating-stars-component\";import Quatsion from\"./Quatsion\";import Serch from\"./Serch\";import FirstQList from\"./FirstQList\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const styleList={boxSizing:\"border-box\",width:\"100%\",minHeight:356,display:\"flex\",flexDirection:\"column\",justifyContent:\"flex-start\",alignItems:\"center\",padding:29,boxShadow:\"inset 3px 3px 3px 3px rgba(0, 0, 0, 0.25)\",overflow:\"visible\",borderRadius:28};const styleSubject={padding:15,boxShadow:\"2px 2px 2px 0px rgba(0, 0, 0, 0.25)\",backgroundColor:\"#eceeee\",overflow:\"visible\",borderRadius:28,border:\"1px solid #b0b0b0\",margin:15};export default function QuatsionList(props){const[chosen,setChosen]=useState(false);const[openFirstQlist,setOpenFirstQlist]=useState(false);///reder proper kind of bikoret base on dropDown\nlet Qlist=props.bikoretKind.map(subject=>/*#__PURE__*/_jsxs(\"div\",{style:styleSubject,children:[/*#__PURE__*/_jsx(\"h3\",{children:subject.name}),/*#__PURE__*/_jsx(\"br\",{}),subject.list.map(quatsion=>/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Quatsion,{bikoretKind:props.bikoretKind,answers:props.answers,setAnswers:props.setAnswers,quatsion:quatsion})}))]}));return/*#__PURE__*/_jsxs(\"div\",{style:styleList,children:[/*#__PURE__*/_jsx(Serch,{bikoretKind:props.bikoretKind,setChosen:setChosen}),chosen!==false&&/*#__PURE__*/_jsxs(_Fragment,{children:[console.log(chosen),/*#__PURE__*/_jsx(Quatsion,{answers:props.answers,setAnswers:props.setAnswers,quatsion:chosen})]}),/*#__PURE__*/_jsx(FirstQList,{answers:props.answers,setAnswers:props.setAnswers,quatsion:chosen,setOpemModel:setOpenFirstQlist,openModel:openFirstQlist}),Qlist]});}","map":{"version":3,"sources":["C:/Users/chenb/Downloads/react/src/components/Add-new/QuatsionList.js"],"names":["miloeim","tash","sadir","ReactStars","Quatsion","Serch","FirstQList","useState","styleList","boxSizing","width","minHeight","display","flexDirection","justifyContent","alignItems","padding","boxShadow","overflow","borderRadius","styleSubject","backgroundColor","border","margin","QuatsionList","props","chosen","setChosen","openFirstQlist","setOpenFirstQlist","Qlist","bikoretKind","map","subject","name","list","quatsion","answers","setAnswers","console","log"],"mappings":"AAAA,OAASA,OAAT,CAAkBC,IAAlB,CAAwBC,KAAxB,KAAqC,oBAArC,CACA,MAAOC,CAAAA,UAAP,KAAuB,8BAAvB,CAEA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAEA,OAASC,QAAT,KAAyB,OAAzB,C,6IACA,KAAMC,CAAAA,SAAS,CAAG,CAChBC,SAAS,CAAE,YADK,CAEhBC,KAAK,CAAE,MAFS,CAGhBC,SAAS,CAAE,GAHK,CAIhBC,OAAO,CAAE,MAJO,CAKhBC,aAAa,CAAE,QALC,CAMhBC,cAAc,CAAE,YANA,CAOhBC,UAAU,CAAE,QAPI,CAQhBC,OAAO,CAAE,EARO,CAShBC,SAAS,CAAE,2CATK,CAUhBC,QAAQ,CAAE,SAVM,CAWhBC,YAAY,CAAE,EAXE,CAAlB,CAcA,KAAMC,CAAAA,YAAY,CAAG,CACnBJ,OAAO,CAAE,EADU,CAEnBC,SAAS,CAAE,qCAFQ,CAGnBI,eAAe,CAAE,SAHE,CAInBH,QAAQ,CAAE,SAJS,CAKnBC,YAAY,CAAE,EALK,CAMnBG,MAAM,CAAE,mBANW,CAOnBC,MAAM,CAAE,EAPW,CAArB,CAUA,cAAe,SAASC,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CAC1C,KAAM,CAACC,MAAD,CAASC,SAAT,EAAsBpB,QAAQ,CAAC,KAAD,CAApC,CACA,KAAM,CAACqB,cAAD,CAAiBC,iBAAjB,EAAsCtB,QAAQ,CAAC,KAAD,CAApD,CACA;AAEA,GAAIuB,CAAAA,KAAK,CAAGL,KAAK,CAACM,WAAN,CAAkBC,GAAlB,CAAuBC,OAAD,eAChC,aAAK,KAAK,CAAEb,YAAZ,wBACE,oBAAKa,OAAO,CAACC,IAAb,EADF,cAGE,aAHF,CAIGD,OAAO,CAACE,IAAR,CAAaH,GAAb,CAAkBI,QAAD,eAChB,sCACE,KAAC,QAAD,EACE,WAAW,CAAEX,KAAK,CAACM,WADrB,CAEE,OAAO,CAAEN,KAAK,CAACY,OAFjB,CAGE,UAAU,CAAEZ,KAAK,CAACa,UAHpB,CAIE,QAAQ,CAAEF,QAJZ,EADF,EADD,CAJH,GADU,CAAZ,CAiBA,mBACE,aAAK,KAAK,CAAE5B,SAAZ,wBACE,KAAC,KAAD,EAAO,WAAW,CAAEiB,KAAK,CAACM,WAA1B,CAAuC,SAAS,CAAEJ,SAAlD,EADF,CAEGD,MAAM,GAAK,KAAX,eACC,2BACGa,OAAO,CAACC,GAAR,CAAYd,MAAZ,CADH,cAKE,KAAC,QAAD,EACE,OAAO,CAAED,KAAK,CAACY,OADjB,CAEE,UAAU,CAAEZ,KAAK,CAACa,UAFpB,CAGE,QAAQ,CAAEZ,MAHZ,EALF,GAHJ,cAeE,KAAC,UAAD,EACE,OAAO,CAAED,KAAK,CAACY,OADjB,CAEE,UAAU,CAAEZ,KAAK,CAACa,UAFpB,CAGE,QAAQ,CAAEZ,MAHZ,CAIE,YAAY,CAAEG,iBAJhB,CAKE,SAAS,CAAED,cALb,EAfF,CAsBGE,KAtBH,GADF,CA0BD","sourcesContent":["import { miloeim, tash, sadir } from \"../../tables/table\";\nimport ReactStars from \"react-rating-stars-component\";\n\nimport Quatsion from \"./Quatsion\";\nimport Serch from \"./Serch\";\nimport FirstQList from \"./FirstQList\";\n\nimport { useState } from \"react\";\nconst styleList = {\n  boxSizing: \"border-box\",\n  width: \"100%\",\n  minHeight: 356,\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"flex-start\",\n  alignItems: \"center\",\n  padding: 29,\n  boxShadow: \"inset 3px 3px 3px 3px rgba(0, 0, 0, 0.25)\",\n  overflow: \"visible\",\n  borderRadius: 28\n};\n\nconst styleSubject = {\n  padding: 15,\n  boxShadow: \"2px 2px 2px 0px rgba(0, 0, 0, 0.25)\",\n  backgroundColor: \"#eceeee\",\n  overflow: \"visible\",\n  borderRadius: 28,\n  border: \"1px solid #b0b0b0\",\n  margin: 15\n};\n\nexport default function QuatsionList(props) {\n  const [chosen, setChosen] = useState(false);\n  const [openFirstQlist, setOpenFirstQlist] = useState(false);\n  ///reder proper kind of bikoret base on dropDown\n\n  let Qlist = props.bikoretKind.map((subject) => (\n    <div style={styleSubject}>\n      <h3>{subject.name}</h3>\n\n      <br />\n      {subject.list.map((quatsion) => (\n        <>\n          <Quatsion\n            bikoretKind={props.bikoretKind}\n            answers={props.answers}\n            setAnswers={props.setAnswers}\n            quatsion={quatsion}\n          />\n        </>\n      ))}\n    </div>\n  ));\n  return (\n    <div style={styleList}>\n      <Serch bikoretKind={props.bikoretKind} setChosen={setChosen} />\n      {chosen !== false && (\n        <>\n          {console.log(chosen)}\n\n          {/* {console.log(getQuatsionByIndex(chosen))} */}\n\n          <Quatsion\n            answers={props.answers}\n            setAnswers={props.setAnswers}\n            quatsion={chosen}\n          />\n        </>\n      )}\n      <FirstQList\n        answers={props.answers}\n        setAnswers={props.setAnswers}\n        quatsion={chosen}\n        setOpemModel={setOpenFirstQlist}\n        openModel={openFirstQlist}\n      />\n      {Qlist}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}