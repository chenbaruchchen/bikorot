{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nconst {\n  GoogleSpreadsheet\n} = require(\"google-spreadsheet\");\n\nconst creds = require(\"./client_secret.json\");\n\nconst doc = new GoogleSpreadsheet(\"10oYFpqtvlSr79jQ4qBqGo1Ng1Z11nb3EmZp5s84ShYA\"); // async function accessSpreadsheet() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n//   const sheet = doc.sheetsByIndex[0];\n//   // console.log(sheet);\n//   return sheet;\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // console.log(rows);\n// }\n// export async function getRows() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n//   const sheet = doc.sheetsByIndex[0];\n//   const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   return rows;\n// }\n// export async function addRows(answers) {\n//   console.log(answers);\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n//   let questionsText = [];\n//   questions.forEach((question) => {\n//     questionsText.push(question.text);\n//   });\n//   console.log([...questionsText]);\n//   // const sheet = await doc.addSheet({ headerValues: [...questionsText] });\n//   const sheet = doc.sheetsByIndex[1];\n//   let answersAndQuestion = {};\n//   let i = 0;\n//   answers.forEach((answer) => {\n//     answersAndQuestion[questionsText[i]] = answer;\n//     i++;\n//   });\n//   console.log(answersAndQuestion);\n//   const newRow = await sheet.addRow(answersAndQuestion);\n//   // // const sheet = await doc.addSheet({ headerValues: [\"name\", \"email\"] });\n//   // const sheet = doc.sheetsByIndex[1];\n//   // // append rows\n//   // const larryRow = await sheet.addRow({\n//   //   name: \"Larry ygjbhbjhb\",\n//   //   email: \"larry@google.com\"\n//   // });\n//   // const moreRows = await sheet.addRows([\n//   //   { name: \"Sergey Brin\", email: \"sergey@google.com\" },\n//   //   { name: \"Eric Schmidt\", email: \"eric@google.com\" }\n//   // ]);\n//   // // read rows\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // // read/write row values\n//   // console.log(rows[0].name); // 'Larry Page'\n//   // rows[1].email = \"sergey@abc.xyz\"; // update a value\n//   // await rows[1].save(); // save updates\n//   // await rows[1].delete(); // delete a row\n// }\n\nexport async function addArrayToNewSheet(array, headLine) {\n  _s();\n\n  await doc.useServiceAccountAuth(creds);\n  await doc.loadInfo();\n  headLine = headLine + \"-\" + array[1].details + \"-\" + array[2].details;\n  const sheet = await doc.addSheet({\n    headerValues: [\"index\", \"quatsion\", \"rate\", \"details\", \"found\"],\n    title: headLine\n  });\n  let table = [];\n  array.forEach(element => {\n    let index;\n    let row = {\n      rate: element.rate,\n      details: element.details,\n      found: element.found\n    };\n    table.push(row);\n  });\n  const moreRows = await sheet.addRows(table);\n}\n\n_s(addArrayToNewSheet, \"XzZzjmf42T4ghIIVsLcPZIIQRXQ=\", false, function () {\n  return [doc.useServiceAccountAuth];\n});\n\nexport async function getSheets(array) {\n  _s2();\n\n  await doc.useServiceAccountAuth(creds);\n  await doc.loadInfo();\n  return doc;\n}\n\n_s2(getSheets, \"XzZzjmf42T4ghIIVsLcPZIIQRXQ=\", false, function () {\n  return [doc.useServiceAccountAuth];\n});","map":{"version":3,"sources":["C:/Users/chenb/Downloads/react/src/components/GoogleSheet/GoogleSheets.js"],"names":["GoogleSpreadsheet","require","creds","doc","addArrayToNewSheet","array","headLine","useServiceAccountAuth","loadInfo","details","sheet","addSheet","headerValues","title","table","forEach","element","index","row","rate","found","push","moreRows","addRows","getSheets"],"mappings":";;;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAC,oBAAD,CAArC;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAME,GAAG,GAAG,IAAIH,iBAAJ,CACV,8CADU,CAAZ,C,CAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeI,kBAAf,CAAkCC,KAAlC,EAAyCC,QAAzC,EAAmD;AAAA;;AACxD,QAAMH,GAAG,CAACI,qBAAJ,CAA0BL,KAA1B,CAAN;AACA,QAAMC,GAAG,CAACK,QAAJ,EAAN;AAEDF,EAAAA,QAAQ,GAACA,QAAQ,GAAE,GAAV,GAAeD,KAAK,CAAC,CAAD,CAAL,CAASI,OAAxB,GAAiC,GAAjC,GAAsCJ,KAAK,CAAC,CAAD,CAAL,CAASI,OAAxD;AACC,QAAMC,KAAK,GAAG,MAAMP,GAAG,CAACQ,QAAJ,CAAa;AAC/BC,IAAAA,YAAY,EAAE,CAAC,OAAD,EAAU,UAAV,EAAsB,MAAtB,EAA8B,SAA9B,EAAyC,OAAzC,CADiB;AAGhCC,IAAAA,KAAK,EAAEP;AAHyB,GAAb,CAApB;AAMA,MAAIQ,KAAK,GAAG,EAAZ;AACAT,EAAAA,KAAK,CAACU,OAAN,CAAeC,OAAD,IAAa;AACzB,QAAIC,KAAJ;AAEA,QAAIC,GAAG,GAAG;AACRC,MAAAA,IAAI,EAAEH,OAAO,CAACG,IADN;AAERV,MAAAA,OAAO,EAAEO,OAAO,CAACP,OAFT;AAGRW,MAAAA,KAAK,EAAEJ,OAAO,CAACI;AAHP,KAAV;AAKAN,IAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD,GATD;AAWA,QAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACa,OAAN,CAAcT,KAAd,CAAvB;AACD;;GAxBqBV,kB;UACdD,GAAG,CAACI,qB;;;AAyBZ,OAAO,eAAeiB,SAAf,CAAyBnB,KAAzB,EAAgC;AAAA;;AACrC,QAAMF,GAAG,CAACI,qBAAJ,CAA0BL,KAA1B,CAAN;AACA,QAAMC,GAAG,CAACK,QAAJ,EAAN;AAEA,SAAOL,GAAP;AACD;;IALqBqB,S;UACdrB,GAAG,CAACI,qB","sourcesContent":["const { GoogleSpreadsheet } = require(\"google-spreadsheet\");\n\nconst creds = require(\"./client_secret.json\");\nconst doc = new GoogleSpreadsheet(\n  \"10oYFpqtvlSr79jQ4qBqGo1Ng1Z11nb3EmZp5s84ShYA\"\n);\n\n// async function accessSpreadsheet() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n\n//   const sheet = doc.sheetsByIndex[0];\n//   // console.log(sheet);\n//   return sheet;\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // console.log(rows);\n// }\n\n// export async function getRows() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n\n//   const sheet = doc.sheetsByIndex[0];\n//   const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   return rows;\n// }\n\n// export async function addRows(answers) {\n//   console.log(answers);\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n\n//   let questionsText = [];\n//   questions.forEach((question) => {\n//     questionsText.push(question.text);\n//   });\n//   console.log([...questionsText]);\n//   // const sheet = await doc.addSheet({ headerValues: [...questionsText] });\n//   const sheet = doc.sheetsByIndex[1];\n\n//   let answersAndQuestion = {};\n//   let i = 0;\n//   answers.forEach((answer) => {\n//     answersAndQuestion[questionsText[i]] = answer;\n//     i++;\n//   });\n//   console.log(answersAndQuestion);\n//   const newRow = await sheet.addRow(answersAndQuestion);\n\n//   // // const sheet = await doc.addSheet({ headerValues: [\"name\", \"email\"] });\n//   // const sheet = doc.sheetsByIndex[1];\n//   // // append rows\n//   // const larryRow = await sheet.addRow({\n//   //   name: \"Larry ygjbhbjhb\",\n//   //   email: \"larry@google.com\"\n//   // });\n//   // const moreRows = await sheet.addRows([\n//   //   { name: \"Sergey Brin\", email: \"sergey@google.com\" },\n//   //   { name: \"Eric Schmidt\", email: \"eric@google.com\" }\n//   // ]);\n//   // // read rows\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // // read/write row values\n//   // console.log(rows[0].name); // 'Larry Page'\n//   // rows[1].email = \"sergey@abc.xyz\"; // update a value\n//   // await rows[1].save(); // save updates\n//   // await rows[1].delete(); // delete a row\n// }\n \nexport async function addArrayToNewSheet(array, headLine) {\n  await doc.useServiceAccountAuth(creds);\n  await doc.loadInfo();\n  \n headLine=headLine +\"-\" +array[1].details+ \"-\"+ array[2].details \n  const sheet = await doc.addSheet({\n    headerValues: [\"index\", \"quatsion\", \"rate\", \"details\", \"found\"]\n  \n  ,title: headLine \n})\n\n  let table = [];\n  array.forEach((element) => {\n    let index;\n\n    let row = {\n      rate: element.rate,\n      details: element.details,\n      found: element.found\n    };\n    table.push(row);\n  });\n\n  const moreRows = await sheet.addRows(table);\n}\n\nexport async function getSheets(array) {\n  await doc.useServiceAccountAuth(creds);\n  await doc.loadInfo();\n\n  return doc;\n}\n"]},"metadata":{},"sourceType":"module"}