{"ast":null,"code":"const{GoogleSpreadsheet}=require(\"google-spreadsheet\");const creds=require(\"./client_secret.json\");const doc=new GoogleSpreadsheet(\"10oYFpqtvlSr79jQ4qBqGo1Ng1Z11nb3EmZp5s84ShYA\");// async function accessSpreadsheet() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n//   const sheet = doc.sheetsByIndex[0];\n//   // console.log(sheet);\n//   return sheet;\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // console.log(rows);\n// }\n// export async function getRows() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n//   const sheet = doc.sheetsByIndex[0];\n//   const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   return rows;\n// }\n// export async function addRows(answers) {\n//   console.log(answers);\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n//   let questionsText = [];\n//   questions.forEach((question) => {\n//     questionsText.push(question.text);\n//   });\n//   console.log([...questionsText]);\n//   // const sheet = await doc.addSheet({ headerValues: [...questionsText] });\n//   const sheet = doc.sheetsByIndex[1];\n//   let answersAndQuestion = {};\n//   let i = 0;\n//   answers.forEach((answer) => {\n//     answersAndQuestion[questionsText[i]] = answer;\n//     i++;\n//   });\n//   console.log(answersAndQuestion);\n//   const newRow = await sheet.addRow(answersAndQuestion);\n//   // // const sheet = await doc.addSheet({ headerValues: [\"name\", \"email\"] });\n//   // const sheet = doc.sheetsByIndex[1];\n//   // // append rows\n//   // const larryRow = await sheet.addRow({\n//   //   name: \"Larry ygjbhbjhb\",\n//   //   email: \"larry@google.com\"\n//   // });\n//   // const moreRows = await sheet.addRows([\n//   //   { name: \"Sergey Brin\", email: \"sergey@google.com\" },\n//   //   { name: \"Eric Schmidt\", email: \"eric@google.com\" }\n//   // ]);\n//   // // read rows\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // // read/write row values\n//   // console.log(rows[0].name); // 'Larry Page'\n//   // rows[1].email = \"sergey@abc.xyz\"; // update a value\n//   // await rows[1].save(); // save updates\n//   // await rows[1].delete(); // delete a row\n// }\nexport async function addArrayToNewSheet(array,headLine){await doc.useServiceAccountAuth(creds);await doc.loadInfo();headLine=headLine+\"-\"+array[1].details+\"-\"+array[2].details;const sheet=await doc.addSheet({headerValues:[\"index\",\"quatsion\",\"rate\",\"details\",\"found\"],title:headLine});let table=[];array.forEach(element=>{let index;let row={rate:element.rate,details:element.details,found:element.found};table.push(row);});const moreRows=await sheet.addRows(table);}export async function getSheets(array){await doc.useServiceAccountAuth(creds);await doc.loadInfo();return doc;}","map":{"version":3,"sources":["C:/Users/chenb/Downloads/react/src/components/GoogleSheet/GoogleSheets.js"],"names":["GoogleSpreadsheet","require","creds","doc","addArrayToNewSheet","array","headLine","useServiceAccountAuth","loadInfo","details","sheet","addSheet","headerValues","title","table","forEach","element","index","row","rate","found","push","moreRows","addRows","getSheets"],"mappings":"AAAA,KAAM,CAAEA,iBAAF,EAAwBC,OAAO,CAAC,oBAAD,CAArC,CAEA,KAAMC,CAAAA,KAAK,CAAGD,OAAO,CAAC,sBAAD,CAArB,CACA,KAAME,CAAAA,GAAG,CAAG,GAAIH,CAAAA,iBAAJ,CACV,8CADU,CAAZ,CAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,eAAeI,CAAAA,kBAAf,CAAkCC,KAAlC,CAAyCC,QAAzC,CAAmD,CACxD,KAAMH,CAAAA,GAAG,CAACI,qBAAJ,CAA0BL,KAA1B,CAAN,CACA,KAAMC,CAAAA,GAAG,CAACK,QAAJ,EAAN,CAEDF,QAAQ,CAACA,QAAQ,CAAE,GAAV,CAAeD,KAAK,CAAC,CAAD,CAAL,CAASI,OAAxB,CAAiC,GAAjC,CAAsCJ,KAAK,CAAC,CAAD,CAAL,CAASI,OAAxD,CACC,KAAMC,CAAAA,KAAK,CAAG,KAAMP,CAAAA,GAAG,CAACQ,QAAJ,CAAa,CAC/BC,YAAY,CAAE,CAAC,OAAD,CAAU,UAAV,CAAsB,MAAtB,CAA8B,SAA9B,CAAyC,OAAzC,CADiB,CAGhCC,KAAK,CAAEP,QAHyB,CAAb,CAApB,CAMA,GAAIQ,CAAAA,KAAK,CAAG,EAAZ,CACAT,KAAK,CAACU,OAAN,CAAeC,OAAD,EAAa,CACzB,GAAIC,CAAAA,KAAJ,CAEA,GAAIC,CAAAA,GAAG,CAAG,CACRC,IAAI,CAAEH,OAAO,CAACG,IADN,CAERV,OAAO,CAAEO,OAAO,CAACP,OAFT,CAGRW,KAAK,CAAEJ,OAAO,CAACI,KAHP,CAAV,CAKAN,KAAK,CAACO,IAAN,CAAWH,GAAX,EACD,CATD,EAWA,KAAMI,CAAAA,QAAQ,CAAG,KAAMZ,CAAAA,KAAK,CAACa,OAAN,CAAcT,KAAd,CAAvB,CACD,CAED,MAAO,eAAeU,CAAAA,SAAf,CAAyBnB,KAAzB,CAAgC,CACrC,KAAMF,CAAAA,GAAG,CAACI,qBAAJ,CAA0BL,KAA1B,CAAN,CACA,KAAMC,CAAAA,GAAG,CAACK,QAAJ,EAAN,CAEA,MAAOL,CAAAA,GAAP,CACD","sourcesContent":["const { GoogleSpreadsheet } = require(\"google-spreadsheet\");\n\nconst creds = require(\"./client_secret.json\");\nconst doc = new GoogleSpreadsheet(\n  \"10oYFpqtvlSr79jQ4qBqGo1Ng1Z11nb3EmZp5s84ShYA\"\n);\n\n// async function accessSpreadsheet() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n\n//   const sheet = doc.sheetsByIndex[0];\n//   // console.log(sheet);\n//   return sheet;\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // console.log(rows);\n// }\n\n// export async function getRows() {\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n\n//   const sheet = doc.sheetsByIndex[0];\n//   const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   return rows;\n// }\n\n// export async function addRows(answers) {\n//   console.log(answers);\n//   await doc.useServiceAccountAuth(creds);\n//   await doc.loadInfo();\n\n//   let questionsText = [];\n//   questions.forEach((question) => {\n//     questionsText.push(question.text);\n//   });\n//   console.log([...questionsText]);\n//   // const sheet = await doc.addSheet({ headerValues: [...questionsText] });\n//   const sheet = doc.sheetsByIndex[1];\n\n//   let answersAndQuestion = {};\n//   let i = 0;\n//   answers.forEach((answer) => {\n//     answersAndQuestion[questionsText[i]] = answer;\n//     i++;\n//   });\n//   console.log(answersAndQuestion);\n//   const newRow = await sheet.addRow(answersAndQuestion);\n\n//   // // const sheet = await doc.addSheet({ headerValues: [\"name\", \"email\"] });\n//   // const sheet = doc.sheetsByIndex[1];\n//   // // append rows\n//   // const larryRow = await sheet.addRow({\n//   //   name: \"Larry ygjbhbjhb\",\n//   //   email: \"larry@google.com\"\n//   // });\n//   // const moreRows = await sheet.addRows([\n//   //   { name: \"Sergey Brin\", email: \"sergey@google.com\" },\n//   //   { name: \"Eric Schmidt\", email: \"eric@google.com\" }\n//   // ]);\n//   // // read rows\n//   // const rows = await sheet.getRows(); // can pass in { limit, offset }\n//   // // read/write row values\n//   // console.log(rows[0].name); // 'Larry Page'\n//   // rows[1].email = \"sergey@abc.xyz\"; // update a value\n//   // await rows[1].save(); // save updates\n//   // await rows[1].delete(); // delete a row\n// }\n \nexport async function addArrayToNewSheet(array, headLine) {\n  await doc.useServiceAccountAuth(creds);\n  await doc.loadInfo();\n  \n headLine=headLine +\"-\" +array[1].details+ \"-\"+ array[2].details \n  const sheet = await doc.addSheet({\n    headerValues: [\"index\", \"quatsion\", \"rate\", \"details\", \"found\"]\n  \n  ,title: headLine \n})\n\n  let table = [];\n  array.forEach((element) => {\n    let index;\n\n    let row = {\n      rate: element.rate,\n      details: element.details,\n      found: element.found\n    };\n    table.push(row);\n  });\n\n  const moreRows = await sheet.addRows(table);\n}\n\nexport async function getSheets(array) {\n  await doc.useServiceAccountAuth(creds);\n  await doc.loadInfo();\n\n  return doc;\n}\n"]},"metadata":{},"sourceType":"module"}